# Falls es an dieser Stelle Fehlermeldungen gibt, müssen die Packages mit 
# install.packages installiert werden

#library(shiny)
if(!require(shiny)){
  install.packages("shiny")
  require(shiny)
}

# Dashboard
#library(shinydashboard)
if(!require(shinydashboard)){
  install.packages("shinydashboard")
  require(shinydashboard)
}

# Tidyverse
#library(tidyverse)
if(!require(tidyverse)){
  install.packages("tidyverse")
  require(tidyverse)
}

# DT-Tabellen in shiny
#library(DT)
if(!require(DT)){
  install.packages("DT")
  require(DT)
}

# plotly-Plots
#library(plotly)
if(!require(plotly)){
  install.packages("plotly")
  require(plotly)
}

# wird für source_directory benötigt
#library(R.utils)
if(!require(R.utils)){
  install.packages("R.utils")
  require(R.utils)
}

# Import von .xls- und .xlsx-Dateien
#library(readxl)
if(!require(readxl)){
  install.packages("readlxl")
  require(readxl)
}

# Import von .csv-Dateien
#library(readr)
if(!require(readr)){
  install.packages("readr")
  require(readr)
}
# Bearbeiten von Strings
#library(stringr)
if(!require(stringr)){
  install.packages("stringr")
  require(stringr)
}

# Objektorientiertes System; z.B. TabBox ist ein R6-Objekt
#library(R6)
if(!require(R6)){
  install.packages("R6")
  require(R6)
}

# UI
#library(shinyWidgets)
if(!require(shinyWidgets)){
  install.packages("shinyWidgets")
  require(shinyWidgets)
}

# Tooltips
#library(shinyBS)
if(!require(shinyBS)){
  install.packages("shinyBS")
  require(shinyBS)
}

if(!require(reshape2)){
  install.packages("reshape2")
  require(reshape2)
}

#-------------------Alle Dateien in im Ordner modules werden geladen-----------
# Source source_directory.R
source("./modules/predefined/source_directory.R", encoding = "UTF-8")

# Nutze source_directory, um gesamten Ordner zu sourcen; setze verbose = FALSE,
# um keine Mitteilungen in der Konsole zu sehen
source_directory(
  "./modules", encoding = "UTF-8", modifiedOnly = FALSE, chdir = TRUE, 
  verbose = TRUE, envir = globalenv()
)
#-------------------------------------------------------------------------------


#-------------------------------------------------------------------------------
# Erzeuge einen Viewer, in dem Plots und Tabellen in einzelnen Tabs dargestellt
# werden können
viewer <- TabBox$new(
  id = "viewer",
  title = "Viewer",
  width = 12
)
#-------------------------------------------------------------------------------


# Scrollen in zu breiten DT-Tabellen
options(DT.options = list(scrollX = TRUE))

ui <- div(
  tags$head(
    # Include custom css styles
    tags$link(
      rel = "stylesheet",
      type = "text/css",
      href = "styles.css"
    )
  ),
  dashboardPage(
    dashboardHeader(
      title = "DQE-App"
    ),
    dashboardSidebar(
      sidebarMenu(
        menuItem(
          text = "Import",
          tabName = "import"
        ),
        menuItem(
          text = "Projekt",
          menuSubItem(
            text = "Ortsauswahl",
            tabName = "ortsauswahl"
          ),
          menuSubItem(
            text = "Standardisierung",
            tabName = "standardisierung"
          ),
          menuSubItem(
            text = "Versuchsplan",
            tabName = "versuchsplan"
          ),
          menuSubItem(
            text = "Steepest-Ascent",
            tabName = "steepest_ascent"
          ),
          menuSubItem(
            text = "Kosten-Rechnung",
            tabName = "costs"
          )
        ),
        menuItem(
          text = "Ueber Uns",
          tabName = "about_us"
        )
      )
    ),
    dashboardBody(
      sidebarLayout(
        sidebarPanel(
          tabItems(
            tabItem(
              tabName = "import",
                title = "Import",
                width = 6,
                excel_csv_file_input_ui(
                  id = "id_excel_csv_file_input"
              )
            ),
            tabItem(
              tabName = "ortsauswahl",
                title = "Ortsauswahl",
                width = 4,
                ortsauswahl_ui(
                  id = "id_ortsauswahl"
              )
            ),
            tabItem(
              tabName = "standardisierung",
             
                title = "Standardisierung",
                width = 4,
                standardisierung_ui(
                  id = "id_standardisierung"
              )
            ),
            tabItem(
              tabName = "versuchsplan",
              
                title = "Versuchsplan",
                width = 4,
                versuchsplan_ui(
                  id = "id_versuchsplan"
              )
            ),
            tabItem(
              tabName = "steepest_ascent",
                title = "Steepest-Ascent",
                width = 4,
                steepest_ascent_ui(
                  id = "id_steepest_ascent"
                )
              ),
                tabItem(
                  tabName = "costs",
                    title = "Kostenrechnung",
                    width = 4,
                    cost_calc_ui(
                      id = "id_cost_calc"    
              )
            ), #Über Uns Tab
            tabItem(
              tabName = "about_us",
              title = "Ueber Uns",
                width = 4,
                about_us_ui(
                  id = "id_about_us"
              )
            )
          )
        ),
        mainPanel(
          # Container, in dem die Inhalte des Viewers dargestellt werden
          viewer$tabBox()
        )
      )
    )
  )
)

server <- function(input, output, session) {
  
  # Verknüpfe Viewer mit der session
  viewer$set_session(session)
  
  # Erzeuge eine Liste, die allen Modulen als Argument übergeben wird
  .values <- list(
    data_storage = ObjectStorage$new(),
    viewer = viewer 
  )
  
  # Rufe Module auf
  callModule(
    module = excel_csv_file_input,
    id = "id_excel_csv_file_input",
    .values = .values
  )
  
  callModule(
    module = ortsauswahl,
    id = "id_ortsauswahl",
    .values = .values
  )
  
  callModule(
    module = standardisierung,
    id = "id_standardisierung",
    .values = .values
  )
  
  callModule(
    module = steepest_ascent,
    id = "id_steepest_ascent",
    .values = .values
  )
  
  callModule(
    module = versuchsplan,
    id = "id_versuchsplan",
    .values = .values
  )

  callModule(
    module = cost_calc,
    id = "id_cost_calc",
    .values = .values
  )
  
  #Über Uns Modul:
  callModule(
    module = about_us,
    id = "id_about_us",
    .values = .values
  )
}

# Erzeuge die App
shinyApp(ui, server)