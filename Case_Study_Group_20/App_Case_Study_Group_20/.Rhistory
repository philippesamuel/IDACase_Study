Engine_Types <- rbind(Engines_Types_1, Engines_Types_2, Engines_Types_3, Engines_Types_4)
#Change the engine column to diesel/petrol -> K1D... -> "Diesel", K1B... -> "Benzin"
index_B <- str_detect(Engine_Types$ID_Motor, "K1B")
Engine_Types[, "ID_Motor"] <- "Diesel"
Engine_Types[index_B, "ID_Motor"] <- "Benzin"
Engine_Types$ID_Motor <- as.factor(Engine_Types$ID_Motor)
#Registration date and place
#We need the place and date of registration
Zulassungen <- read_csv2("Zulassungen/Zulassungen_alle_Fahrzeuge.csv",
col_types = cols(X1 = col_skip()))
#Gedata of place
#We need latitute and altitude of every commune and the post code
Geodata <- read_csv2("Geodaten/Geodaten_Gemeinden_v1.2_2017-08-22_TrR.csv",
col_types = cols(X1 = col_skip(), X = col_skip()))
#Now combine everything:
#1.) Combine this data frame with the registration information:
complete_information <- inner_join(Engine_Types, Zulassungen, by = c("ID_Fahrzeug" = "IDNummer"))
#2.) Combine this data frame with the geodata:
complete_information <- left_join(complete_information, Geodata, by = c("Gemeinden" = "Gemeinde"))
#PLZ Null davor setzen, wenn nur vierstellig!
head(complete_information)
#We need to get the information about the engine type (diesel/petrol):
#Engine-IDs -> Diesel vs. Petrol:
Engines_Types_1 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM1_Typ11.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
Engines_Types_2 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM1_Typ12.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
Engines_Types_3 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM2_Typ21.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
Engines_Types_4 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM2_Typ22.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
#Combine to one Error-File:
Engine_Types <- rbind(Engines_Types_1, Engines_Types_2, Engines_Types_3, Engines_Types_4)
#Change the engine column to diesel/petrol -> K1D... -> "Diesel", K1B... -> "Benzin"
index_B <- str_detect(Engine_Types$ID_Motor, "K1B")
Engine_Types[, "ID_Motor"] <- "Diesel"
Engine_Types[index_B, "ID_Motor"] <- "Benzin"
#Registration date and place
#We need the place and date of registration
Zulassungen <- read_csv2("Zulassungen/Zulassungen_alle_Fahrzeuge.csv",
col_types = cols(X1 = col_skip()))
#Gedata of place
#We need latitute and altitude of every commune and the post code
Geodata <- read_csv2("Geodaten/Geodaten_Gemeinden_v1.2_2017-08-22_TrR.csv",
col_types = cols(X1 = col_skip(), X = col_skip()))
#Now combine everything:
#1.) Combine this data frame with the registration information:
complete_information <- inner_join(Engine_Types, Zulassungen, by = c("ID_Fahrzeug" = "IDNummer"))
#2.) Combine this data frame with the geodata:
complete_information <- left_join(complete_information, Geodata, by = c("Gemeinden" = "Gemeinde"))
#PLZ Null davor setzen, wenn nur vierstellig!
head(complete_information)
colSums(is.na(complete_information))
subset(complete_information, is.na(complete_information$Laengengrad)) #-> Gemeinde Seeg überprüfen!
complete_information[complete_information$Gemeinden == "SEEG", "Postleitzahl"] <- 87637
complete_information[complete_information$Gemeinden == "SEEG", "Laengengrad"] <- 10.61
complete_information[complete_information$Gemeinden == "SEEG", "Breitengrad"] <- 47.67
#Group by post code, create new columns with information about the percentage of diesel cars and select relevant columns
complete_information2 <- complete_information %>%
group_by(Gemeinden) %>%
mutate(Anteil_Diesel = NROW(ID_Motor == "Diesel")/NROW(ID_Motor), Gesamt_Autos = NROW(ID_Motor)) %>%
select(Zulassung, ID_Motor, Gemeinden, Postleitzahl, Gesamt_Autos, Anteil_Diesel, Laengengrad, Breitengrad)
View(complete_information2)
NROW(complete_information$ID_Motor == "Diesel")
complete_information$ID_Motor == "Diesel
complete_information$ID_Motor == "Diesel"
sum(complete_information$ID_Motor == "Diesel")
NROW(complete_information$ID_Motor == "Diesel")
NROW(complete_information$ID_Motor)
#Group by post code, create new columns with information about the percentage of diesel cars and select relevant columns
complete_information2 <- complete_information %>%
group_by(Gemeinden) %>%
mutate(Anteil_Diesel = sum(ID_Motor == "Diesel")/NROW(ID_Motor), Gesamt_Autos = NROW(ID_Motor)) %>%
select(Zulassung, ID_Motor, Gemeinden, Postleitzahl, Gesamt_Autos, Anteil_Diesel, Laengengrad, Breitengrad)
setwd("C:/Users/sahid/Documents/GitHub/IDACase_Study/Case_Study_Group_20")
save(complete_information2, file = "Final_Data_Group_20.RData")
save(complete_information, file = "Final_Data_Group_20_original.RData")
runApp('Case_Study_App_Group_20.R')
#### Loading the final RData file ####
# May return an error when run manually so click run app button
load("Final_Data_Group_20.RData")
head(complete_information2)
Heatmap_Data <- complete_information2[match(
unique(complete_information2$Gemeinden),
complete_information2$Gemeinden),]
head(Heatmap_Data)
View(Heatmap_Data)
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
#### Loading the final RData file ####
# May return an error when run manually so click run app button
load("Final_Data_Group_20_original.RData")
head(complete_information)
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
complete_information <- group_by(complete_information, Gemeinden)
setwd("C:/Users/sahid/Documents/GitHub/IDACase_Study/Case_Study_Group_20")
save(complete_information, file = "Final_Data_Group_20_original.RData")
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
load("Final_Data_Group_20_original.RData")
head(complete_information)
test <- complete_information %>%
filter(Zulassung < "2009-01-15") %>%
filter(!(Postleitzahl == input$14513 && ID_Motor == "Diesel")) %>%
mutate(Anteil_Diesel = sum(ID_Motor == "Diesel")/NROW(ID_Motor), Gesamt_Autos = NROW(ID_Motor))
test <- complete_information %>%
filter(Zulassung < "2009-01-15") %>%
filter(!(Postleitzahl == input$14513 && ID_Motor == "Diesel")) %>%
mutate(Anteil_Diesel = sum(ID_Motor == "Diesel")/NROW(ID_Motor), Gesamt_Autos = NROW(ID_Motor))
test <- complete_information %>%
filter(Zulassung < "2009-01-15") %>%
filter(!(Postleitzahl == 14513 && ID_Motor == "Diesel")) %>%
mutate(Anteil_Diesel = sum(ID_Motor == "Diesel")/NROW(ID_Motor), Gesamt_Autos = NROW(ID_Motor))
head(test)
View(test)
runApp('Case_Study_App_Group_20.R')
complete_information %>%
filter(Zulassung < "2009-01-31") %>%
filter(!(Postleitzahl == 14513 && ID_Motor == "Diesel")) %>%
mutate(Anteil_Diesel = sum(ID_Motor == "Diesel")/NROW(ID_Motor), Gesamt_Autos = NROW(ID_Motor))
load("Final_Data_Group_20_original.RData")
complete_information %>%
filter(Zulassung < "2009-01-31") %>%
filter(!(Postleitzahl == 14513 && ID_Motor == "Diesel")) %>%
mutate(Anteil_Diesel = sum(ID_Motor == "Diesel")/NROW(ID_Motor), Gesamt_Autos = NROW(ID_Motor))
test <- complete_information %>%
filter(Zulassung < "2009-01-31") %>%
filter(!(Postleitzahl == 14513 && ID_Motor == "Diesel")) %>%
mutate(Anteil_Diesel = sum(ID_Motor == "Diesel")/NROW(ID_Motor), Gesamt_Autos = NROW(ID_Motor))
head(test)
View(test)
test <- complete_information %>%
filter(Zulassung < "2009-01-31") %>%
filter(!(Postleitzahl == 14513 && ID_Motor == "Diesel"))
test[Gemeinde == "TELTOW"]
test["Gemeinde" == "TELTOW"]
test[test$Gemeinden == "TELTOW"]
test[test$Gemeinden == "TELTOW",]
test <- complete_information %>%
filter(Zulassung < "2009-01-31") %>%
filter(!ID_Motor == "Diesel"))
test <- complete_information %>%
filter(Zulassung < "2009-01-31") %>%
filter(!ID_Motor == "Diesel")
test[test$Gemeinden == "TELTOW",]
complete_information[complete_information$Postleitzahl == 14513 && complete_information$ID_Motor == "Diesel"]
complete_information[complete_information$Postleitzahl == 14513 && complete_information$ID_Motor == "Diesel",]
(complete_information$Postleitzahl == 14513 && complete_information$ID_Motor)
(complete_information$Postleitzahl == 14513)
(complete_information$Postleitzahl == 14513 & complete_information$ID_Motor)
complete_information[(complete_information$Postleitzahl == 14513 & complete_information$ID_Motor == "Diesel"),]
test <- complete_information %>%
filter(Zulassung < "2009-01-31") %>%
filter(!(Postleitzahl == 14513 & ID_Motor == "Diesel"))
test[test$Postleitzahl == 14513]
test[test$Postleitzahl == 14513,]
runApp('Case_Study_App_Group_20.R')
View(complete_information)
complete_information %>% mutate(Region = substr(Postleitzahl, 1, 2))
#We need to get the information about the engine type (diesel/petrol):
#Engine-IDs -> Diesel vs. Petrol:
Engines_Types_1 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM1_Typ11.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
Engines_Types_2 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM1_Typ12.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
Engines_Types_3 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM2_Typ21.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
Engines_Types_4 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM2_Typ22.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
#Combine to one Error-File:
Engine_Types <- rbind(Engines_Types_1, Engines_Types_2, Engines_Types_3, Engines_Types_4)
#Change the engine column to diesel/petrol -> K1D... -> "Diesel", K1B... -> "Benzin"
index_B <- str_detect(Engine_Types$ID_Motor, "K1B")
Engine_Types[, "ID_Motor"] <- "Diesel"
Engine_Types[index_B, "ID_Motor"] <- "Benzin"
#Registration date and place
#We need the place and date of registration
Zulassungen <- read_csv2("Zulassungen/Zulassungen_alle_Fahrzeuge.csv",
col_types = cols(X1 = col_skip()))
#Gedata of place
#We need latitute and altitude of every commune and the post code
Geodata <- read_csv2("Geodaten/Geodaten_Gemeinden_v1.2_2017-08-22_TrR.csv",
col_types = cols(X1 = col_skip(), X = col_skip()))
#Now combine everything:
#1.) Combine this data frame with the registration information:
complete_information <- inner_join(Engine_Types, Zulassungen, by = c("ID_Fahrzeug" = "IDNummer"))
#2.) Combine this data frame with the geodata:
complete_information <- left_join(complete_information, Geodata, by = c("Gemeinden" = "Gemeinde")) %>%
group_by(Gemeinden)
#PLZ Null davor setzen, wenn nur vierstellig!
remove(complete_information)
#Now combine everything:
#1.) Combine this data frame with the registration information:
complete_information <- inner_join(Engine_Types, Zulassungen, by = c("ID_Fahrzeug" = "IDNummer"))
#2.) Combine this data frame with the geodata:
complete_information <- left_join(complete_information, Geodata, by = c("Gemeinden" = "Gemeinde")) %>%
group_by(Gemeinden)
#3.) #PLZ Null davor setzen, wenn nur vierstellig!
complete_information$Postleitzahl <- str_pad(complete_information$Postleitzahl, 5, pad = "0")
head(complete_information)
colSums(is.na(complete_information))
subset(complete_information, is.na(complete_information$Laengengrad)) #-> Gemeinde Seeg überprüfen!
complete_information[complete_information$Gemeinden == "SEEG", "Postleitzahl"] <- 87637
complete_information[complete_information$Gemeinden == "SEEG", "Laengengrad"] <- 10.61
complete_information[complete_information$Gemeinden == "SEEG", "Breitengrad"] <- 47.67
#Group by post code, create new columns with information about the percentage of diesel cars and select relevant columns
complete_information2 <- complete_information %>%
group_by(Gemeinden) %>%
mutate(Anteil_Diesel = sum(ID_Motor == "Diesel")/NROW(ID_Motor), Gesamt_Autos = NROW(ID_Motor), Region = substr(Postleitzahl, 1, 2)) %>%
select(Zulassung, ID_Motor, Gemeinden, Postleitzahl, Region, Gesamt_Autos, Anteil_Diesel, Laengengrad, Breitengrad)
setwd("C:/Users/sahid/Documents/GitHub/IDACase_Study/Case_Study_Group_20")
save(complete_information2, file = "Final_Data_Group_20.RData")
save(complete_information, file = "Final_Data_Group_20_original.RData")
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
setwd("~/GitHub/IDACase_Study/Case_Study_Group_20/App_Case_Study_Group_20")
runApp('Case_Study_App_Group_20.R')
if(!require(shiny)){
install.packages("shiny")
require(shiny)
}
if(!require(ggplot2)){
install.packages("ggplot2")
require(ggplot2)
}
if(!require(magrittr)){
install.packages("magrittr")
require(magrittr)
}
if(!require(scales)){
install.packages("scales")
require(scales)
}
if(!require(dplyr)){
install.packages("dplyr")
require(dplyr)
}
if(!require(leaflet)){
install.packages("leaflet")
require(leaflet)
}
if(!require(leaflet.extras)){
install.packages("leaflet.extras")
require(leaflet.extras)
}
if(!require(tidyverse)){
install.packages("tidyverse")
require(tidyverse)
}
if(!require(tidyr)){
install.packages("tidyr")
require(tidyr)
}
load("Final_Data_Group_20_original.RData")
load("C:/Users/sahid/Documents/GitHub/IDACase_Study/Case_Study_Group_20/App_Case_Study_Group_20/Final_Data_Group_20_original.RData")
library(shiny); runApp('Case_Study_App_Group_20.R')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "D:/UNI/IDA CaseStudy/Data/") #Set working directory
if(!require(dplyr)){
install.packages("dplyr")
require(dplyr)
}
if(!require(tidyverse)){
install.packages("tidyverse")
require(tidyverse)
}
if(!require(readr)){
install.packages("readr")
require(readr)
}
if(!require(stringr)){
install.packages("stringr")
require(stringr)
}
#We need to get the information about the engine type (diesel/petrol):
#Engine-IDs -> Diesel vs. Petrol:
Engines_Types_1 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM1_Typ11.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
Engines_Types_2 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM1_Typ12.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
Engines_Types_3 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM2_Typ21.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
Engines_Types_4 <- read_csv2("Fahrzeug/Bestandteile_Fahrzeuge_OEM2_Typ22.csv",
col_types = cols(X1 = col_skip(),
ID_Karosserie = col_skip(),
ID_Schaltung = col_skip(),
ID_Sitze = col_skip()))
#Combine to one Error-File:
Engine_Types <- rbind(Engines_Types_1, Engines_Types_2, Engines_Types_3, Engines_Types_4)
#Change the engine column to diesel/petrol -> K1D... -> "Diesel", K1B... -> "Benzin"
index_B <- str_detect(Engine_Types$ID_Motor, "K1B")
Engine_Types[, "ID_Motor"] <- "Diesel"
Engine_Types[index_B, "ID_Motor"] <- "Benzin"
#Registration date and place
#We need the place and date of registration
Zulassungen <- read_csv2("Zulassungen/Zulassungen_alle_Fahrzeuge.csv",
col_types = cols(X1 = col_skip()))
#Gedata of place
#We need latitute and altitude of every commune and the post code
Geodata <- read_csv2("Geodaten/Geodaten_Gemeinden_v1.2_2017-08-22_TrR.csv",
col_types = cols(X1 = col_skip(), X = col_skip()))
#Now combine everything:
#1.) Combine this data frame with the registration information:
complete_information <- inner_join(Engine_Types, Zulassungen, by = c("ID_Fahrzeug" = "IDNummer"))
#2.) Combine this data frame with the geodata and group by municipality:
complete_information <- left_join(complete_information, Geodata, by = c("Gemeinden" = "Gemeinde")) %>%
group_by(Gemeinden)
#3.) #PLZ Null davor setzen, wenn nur vierstellig!
complete_information$Postleitzahl <- str_pad(complete_information$Postleitzahl, 5, pad = "0")
colSums(is.na(complete_information))
subset(complete_information, is.na(complete_information$Laengengrad)) #-> Gemeinde Seeg überprüfen!
complete_information[complete_information$Gemeinden == "SEEG", "Postleitzahl"] <- 87637
complete_information[complete_information$Gemeinden == "SEEG", "Laengengrad"] <- 10.61
complete_information[complete_information$Gemeinden == "SEEG", "Breitengrad"] <- 47.67
#Save data frame as csv:
setwd("C:/Users/sahid/Documents/GitHub/IDACase_Study/Case_Study_Group_20")
save(complete_information2, file = "Final_Data_Group_20.RData")
#Save data frame as csv:
setwd("C:/Users/sahid/Documents/GitHub/IDACase_Study/Case_Study_Group_20")
# save(complete_information2, file = "Final_Data_Group_20.RData")
save(complete_information, file = "Final_Data_Group_20_original.RData")
write.csv(complete_information, "Case_Study_Data.csv")
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
head(complete_information)
remove(complete_information)
#Now combine everything:
#1.) Combine this data frame with the registration information:
complete_information <- inner_join(Engine_Types, Zulassungen, by = c("ID_Fahrzeug" = "IDNummer"))
#2.) Combine this data frame with the geodata and group by municipality:
complete_information <- left_join(complete_information, Geodata, by = c("Gemeinden" = "Gemeinde"))
#3.) #PLZ Null davor setzen, wenn nur vierstellig!
complete_information$Postleitzahl <- str_pad(complete_information$Postleitzahl, 5, pad = "0")
colSums(is.na(complete_information))
subset(complete_information, is.na(complete_information$Laengengrad)) #-> Gemeinde Seeg überprüfen!
complete_information[complete_information$Gemeinden == "SEEG", "Postleitzahl"] <- 87637
complete_information[complete_information$Gemeinden == "SEEG", "Laengengrad"] <- 10.61
complete_information[complete_information$Gemeinden == "SEEG", "Breitengrad"] <- 47.67
#Group by post code, create new columns with information about the percentage of diesel cars and select relevant columns
complete_information <- complete_information %>%
group_by(Gemeinden) %>%
mutate(Region = substr(Postleitzahl, 1, 2)) %>%
select(Zulassung, ID_Motor, Gemeinden, Postleitzahl, Region, Laengengrad, Breitengrad)
#Save data frame as csv:
setwd("C:/Users/sahid/Documents/GitHub/IDACase_Study/Case_Study_Group_20")
# save(complete_information2, file = "Final_Data_Group_20.RData")
save(complete_information, file = "Final_Data_Group_20_original.RData")
write.csv(complete_information, "Case_Study_Data.csv")
runApp('Case_Study_App_Group_20.R')
load("Final_Data_Group_20_original.RData")
head(complete_information)
head(unique(complete_information$Region)))
head(unique(complete_information$Region))
head(merge(cbind(unique(complete_information$Region)), "NONE"))
head(merge(rbind(unique(complete_information$Region)), "NONE"))
head(rbind(unique(complete_information$Region)), "NONE")
head(cbind(unique(complete_information$Region)), "NONE")
head(cbind(unique(complete_information$Region), "NONE"))
head(rbind(unique(complete_information$Region), "NONE"))
head(append(complete_information$Region, "NONE"))
append(complete_information$Region, "NONE")
append(unique(complete_information$Region), "NONE")
sort(append(unique(complete_information$Region), "NONE"))
append("NONE", sort(unique(complete_information$Region)))
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
load("Final_Data_Group_20_original.RData")
head(complete_information)
head(complete_information)
test <- complete_information %>%
ungroup() %>%
group_by(Region)%>%
filter(Zulassung < input$banDate)
if(!require(shiny)){
install.packages("shiny")
require(shiny)
}
if(!require(ggplot2)){
install.packages("ggplot2")
require(ggplot2)
}
if(!require(magrittr)){
install.packages("magrittr")
require(magrittr)
}
if(!require(scales)){
install.packages("scales")
require(scales)
}
if(!require(dplyr)){
install.packages("dplyr")
require(dplyr)
}
if(!require(leaflet)){
install.packages("leaflet")
require(leaflet)
}
if(!require(leaflet.extras)){
install.packages("leaflet.extras")
require(leaflet.extras)
}
if(!require(tidyverse)){
install.packages("tidyverse")
require(tidyverse)
}
if(!require(tidyr)){
install.packages("tidyr")
require(tidyr)
}
test <- complete_information %>%
ungroup() %>%
group_by(Region)%>%
filter(Zulassung < input$banDate)
test <- complete_information %>%
ungroup() %>%
group_by(Region)%>%
filter(Zulassung < "2010-05-01")
head(test)
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count")
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_histogram()
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_histogram(stat = "count")
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_histogram(stat = "prop")
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_histogram(stat = "proportion")
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_histogram(position = "proportion")
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_bar(position = "proportion")
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_bar(position = "fill")
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count")
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + facet_grid(~ID_Motor) +
scale_y_continuous(labels = scales::percent)
ggplot(test, aes(x = Region, group = ID_Motor)) +
geom_bar(aes(y = (..count..)/NROW(ID_Motor), fill = factor(..x..)), stat="count") + facet_grid(~ID_Motor) +
scale_y_continuous(labels = scales::percent)
head(test)
ggplot(test, aes(x = Region, y = ID_Motor)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count") + facet_grid(~ID_Motor) +
scale_y_continuous(labels = scales::percent)
ggplot(test, aes(x = Region, fill = ID_Motor)) +
geom_bar(position = "fill") +
scale_y_continuous(labels = scales::percent)
ggplot(test, aes(x = Region, fill = ID_Motor)) +
geom_bar()
ggplot(test, aes(x = Region[1], fill = ID_Motor)) +
geom_bar()
ggplot(test, aes(x = Region[1], fill = ID_Motor=="Diesel")) +
geom_bar()
ggplot(test, aes(x = Region[1])) +
geom_bar()
ggplot(test, aes(x = Region[1], y = sum(ID_Motor == "Diesel"))) +
geom_bar()
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
runApp('Case_Study_App_Group_20.R')
